image: docker:latest
services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay
  SPRING_PROFILES_ACTIVE: gitlab-ci

stages:
  - build
  - dockerize
  - deploy

build:
  stage: build
  image: maven:3-jdk-8-alpine
  script:
    - mvn package -B
  artifacts:
    paths:
      - target/*.jar

dockerize:
  stage: dockerize
  script:
    - docker version
    - docker build -t registry.gitlab.com/vibent/vibent-back .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker images
    - docker push registry.gitlab.com/vibent/vibent-back

deploy:
  stage: deploy
  image: python:3-alpine
  variables:
    AWS_DEFAULT_REGION: "eu-west-3"
  before_script:
##### Install the AWS ECS-CLI #####
    - apk add --update curl
    - curl -o /usr/local/bin/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest
    - chmod +x /usr/local/bin/ecs-cli
  script:
##### Configure ECS-CLI, run the container and scale to 2 #####
    - ecs-cli configure --region $AWS_DEFAULT_REGION --access-key $AWS_ACCESS_KEY_ID --secret-key $AWS_SECRET_ACCESS_KEY --cluster Vibent
    - ecs-cli up --keypair $AWS_KEY_PAIR --capability-iam --size 2 --instance-type t2.micro --vpc vpc-7a5dc513 --subnets subnet-123abc,subnet-321cba
##### This docker-compose.yml is the one described above #####
    - ecs-cli compose --file docker-compose.yml service up --target-group-arn $PROD_TARGET_GROUP_ARN --container-name vibent --container-port 80 --role ecsServiceRole
    - ecs-cli compose --file docker-compose.yml service scale 2
  environment:
    name: ci
    url: $PROD_LOAD_BALANCER_URL
  only:
    - master